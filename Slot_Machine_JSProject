// 1. Deposit funds to play
// 2. Determine number of lines to bet on
// 3. Collect the funds for bet
// 4. Spin slot or play the game
// 5. Check if Player has won or lost
// 6. Give Player winnings
// 7. Play again


// Original function creations style for Javascript
//function deposit()
// {       return new Deposit}

//Newer and more up to date way of creating a function
//below

// const depositAmount is where the deposit is entered into
// then the function is called 

//const is how you declare a variable similar to a function



// The Slot Machine and the varibles for
// it

const prompt = require("prompt-sync")();

const ROWS = 3;
const COLS = 3;

const SYMBOLS_COUNT = {
    "A": 2,
    "B": 4,
    "C": 6,
    "D": 8
}

const SYMBOLS_VALUES = {
    "A": 5,
    "B": 4,
    "C": 3,
    "D": 2
}

//Spinning the Slots Functions

const spin = () => {
    const symbols = [];
    for ([symbol, count] of object.entries(SYMBOLS_COUNT)) {
        for (let i = 0; i < count; i++) {
            symbols.push(symbol);
        }
    }

    const reels = [];
    for (let i = 0; i < COLS; i++) {
        reels.push([])
        const reelSymbols = [...symbols];
        for (let j = 0; j < ROWS; j++) {
            const randomIndex = Math.floor(Math.random() * reelSymbols.length);
            const selectedsymbol = reelSymbols[randomIndex]
            reels[i].push(selectedsymbol);
            reelSymbols.splice(randomIndex, 1);
        }
    }

    return reels;
};

// Step 5. Check if Player has won or lost

const transpose = (reels) => {
    const rows = [];

    for (let i = 0; i < ROWS; i++) {
        rows.push({});
        for (let j = 0; j < COLS; j++) {
            rows[i].push(reels[j][i])
        }
    }

    return rows;
};

const printRows = (rows) => {
    for (const row of rows) {
        let rowString = ""; // Initialize rowString
        for (const [i, symbol] of row.entries()) {
            rowString += symbol;
            if (i != row.length - 1) {
                rowString += " | ";
            }
        }
        console.log(rowString);
    }
};



//Step 6: Collect winnings from Slot Machine play 

const getWinnings = (rows, bet, lines) => {
    let winnings = 0;

    for (let row = 0; row < lines; row++) {
        const symbols = rows[row];
        let allSame = true; // Fix the variable name
    
        for (const symbol of symbols) {
            if (symbol != symbols[0]) {
                allSame = false;
                break;
            }
        }
    
        if (allSame) {
            winnings += bet * SYMBOLS_VALUES[symbols[0]]; // Fix the assignment operator
        }
    }
    

    return winnings;

};

// Move the deposit function definition before calling it
const deposit = () => {
    while (true) {
        const depositAmount = require("prompt-sync")()("Enter deposit amount: ");
        const numberDepositAmount = parseFloat(depositAmount);

        if (isNaN(numberDepositAmount) || numberDepositAmount <= 0) {
            console.log("Invalid deposit amount, try again");
        } else {
            return numberDepositAmount;
        }
    }
};

const game = () => {
    let balance = deposit(); // Now, this should work correctly.
    // ...
};



    // Step 2: Determine number of lines to bet on

    const getNumberOfLines = () => {
        while (true) {
            const lines = require("prompt-sync")()("Enter the number of lines to bet on (1-3): ");
            const numberOfLines = parseFloat(lines);

            //below show the number of lines 

            if (isNaN(numberOfLines) || numberOfLines <= 0 || numberOfLines > 3) {
                console.log("Invalid number of lines, try again");
            } else {
                return numberOfLines;
            }
        }
    };

    // Step 3 : Collect the funds for bet or create a new balance

    const getBet = (balance, lines) => {
        while (true) {
            const bet = require("prompt-sync")()("Enter the bet per line: ");
            const numberBet = parseFloat(bet);

            //below show the number of lines 

            if (isNaN(numberBet) || numberBet <= 0 || numberBet > balance / lines) {
                console.log("Invalid bet, try again");
            } else {
                return numberBet;
            }
        }
    };

while (true) {
    console.log("You have a balance of $" + balance);
    const numberOfLines = getNumberOfLines();
    const bet = getBet(balance, numberOfLines);
    balance -= bet * numberOfLines;
    const reels = spin();
    const rows = transpose(reels);
    printRows(rows);
    const winnings = getWinnings(rows, bet, numberOfLines);
    balance += winnings;
    console.log("You won, $" + winnings.toString());

    if (balance <= 0) {
        console.log("You ran out of money!");
        break;
    }

    const playAgain = prompt("Do you want to play again (y/n)");

    if (playAgain != "y") break;

};

game();
